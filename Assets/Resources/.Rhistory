setwd("~/UnityProjects/Sound-Study/Assets/Resources")
jacob <- read.csv("actualTranslationsAndGuesses2.csv", header = TRUE)
matt <- read.csv("actualTranslationsAndGuesses4.csv", header = TRUE)
stu <- read.csv("actualTranslationsAndGuesses6.csv", header = TRUE)
jonny <- read.csv("actualTranslationsAndGuesses8.csv", header = TRUE)
combinedData <- rbind(jacob, matt, stu, jonny)
View(combinedData)
View(combinedData)
View(combinedData)
combinedData.path <- cbind(combinedData, combinedData[,"From.Abbreviation"] + "-" + combinedData[,"To.Abbreviation"])
combinedData.path <- data.frame(combinedData[,], combinedData[,"From.Abbreviation"] + "-" + combinedData[,"To.Abbreviation"])
?cbind
combinedData.path <- data.frame(combinedData[,], combinedData$From.Abbreviation + "-" + combinedData$To.Abbreviation)
combinedData$path <- combinedData$From.Abbreviation + combinedData$To.Abbreviation
combinedData$From.Abbreviation <- as.character(combinedData$From.Abbreviation)
str(combinedData[5,])
combinedData$To.Abbreviation <- as.character(combinedData$To.Abbreviation);
str(combinedData)
combinedData$path <- combinedData$From.Abbreviation + "-" + combinedData$To.Abbreviation
combinedData$path <- combinedData$From.Abbreviation + combinedData$To.Abbreviation
?paster
?paste
jacob <- read.csv("actualTranslationsAndGuesses2.csv", header = TRUE)
combinedData$path <- paste(combinedData$From.Abbreviation,"-",combinedData$To.Abbreviation)
str(combinedData)
table(combinedData.path$path)
View(combinedData.path)
View(combinedData.path)
?na
?NA
combinedData$path <- paste(combinedData$From.Abbreviation,combinedData$To.Abbreviation,sep="-")
str(combinedData)
table(combinedData$path)
install.packages("ggplot2")
combinedData$path <- as.factor(combinedData$path)
str(combinedData$path)
str(combinedData)
table(combinedData$path)
?ggplot
??ggplot
?ggplot2
dataAnalyzed <- data.frame(combinedData$path, combinedData$Guess.Angle.From, combinedData$Guess.Angle.To)
View(dataAnalyzed)
?ddply
install.packages("plyr")
?ddply
ddply(dataAnalyzed, .(path), summarise, meanFrom = round(mean(Guess.Angle.From),2), sdFrom = round(sd(Guess.Angle.From),2))
install.packages("plyr")
library(plyr)
ddply(dataAnalyzed, .(path), summarise, meanFrom = round(mean(Guess.Angle.From),2), sdFrom = round(sd(Guess.Angle.From),2))
ddply(dataAnalyzed, dataAnalyzed$path, summarise, meanFrom = round(mean(Guess.Angle.From),2), sdFrom = round(sd(Guess.Angle.From),2))
ddply(dataAnalyzed, dataAnalyzed$path, summarise, meanFrom = round(mean(dataAnalyzed$Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$Guess.Angle.From),2))
str(dataAnalyzed)
dataAnalyzed
ddply(dataAnalyzed, dataAnalyzed$path, summarise, meanFrom = round(mean(dataAnalyzed$Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$Guess.Angle.From),2))
mean(dataAnalyzed$Guess.Angle.From)
dataAnalyzed$Guess.Angle.From
dataAnalyzed$combinedData.Guess.Angle.From
mean(dataAnalyzed$combinedData.Guess.Angle.From)
sd(dataAnalyzed$combinedData.Guess.Angle.From)
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(dataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
round(sd(dataAnalyzed$combinedData.Guess.Angle.From)
ee
round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2)
round(mean(dataAnalyzed$combinedData.Guess.Angle.From),2)
dataAnalyzed$combinedData.path
dataAnalyzed
dataAnalyzed[[0]]
?ddply
dataAnalyzed$combinedData.path
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(dataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
as.quoted(dataAnalyzed$combinedData.path)
str(dataAnalyzed$combinedData.path)
dataAnalyzed$combinedData.path
class(dataAnalyzed$combinedData.path)
dataAnalyzed$combinedData.path <- as.character(dataAnalyzed$combinedData.path)
class(dataAnalyzed$combinedData.path)
dataAnalyzed$combinedData.path
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(dataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
dfx
str(dfx)
dataAnalyzed$combinedData.path <- as.factor(dataAnalyzed$combinedData.path)
class(dataAnalyzed$combinedData.path)
str(dataAnalyzed$combinedData.path)
length(dataAnalyzed)
depth(dataAnalyzed)
?length
row(dataAnalyzed)
length(row(dataAnalyzed))
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(dataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
dataAnalyzed$combinedData.path
View(combinedData)
View(combinedData.path)
View(combinedData)
View(jacob)
View(jacob)
View(jonny)
View(matt)
View(combinedData)
View(jacob)
View(jonny)
View(matt)
View(stu)
View(jacob)
View(jonny)
View(stu)
View(matt)
View(combinedData)
jacob <- read.csv("actualTranslationsAndGuesses2.csv", header = TRUE)
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, here(summarise), meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
dfx <- data.frame(
group = c(rep('A-D', 8), rep('B-C', 15), rep('C-E', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
str(dfx)
str(dataAnalyzed)
ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
dataAnalyzed[["B-F"]]
dataAnalyzed
dataAnalyzed[,"B-F"]
View(combinedData)
View(dataAnalyzed)
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dfx, .(combinedData.path), summarize,
mean = round(mean(combinedData.Guess.Angle.From), 2),
sd = round(sd(combinedData.Guess.Angle.From), 2))
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dfx, .(combinedData.path), summarize,
mean = round(mean(combinedData.Guess.Angle.From), 2),
sd = round(sd(combinedData.Guess.Angle.From), 2))
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dfx, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
combinedData.path.
combinedData.path
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dfx, .(combinedData$path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
View(combinedData.path)
View(combinedData.path)
remove(combinedData.path)
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dfx, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
View(combinedData)
remove(combinedData)
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dfx, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dataAnalyzed, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
combinedData <- rbind(jacob, matt, stu, jonny)
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dataAnalyzed, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
# Add path column
combinedData$path <- paste(combinedData$From.Abbreviation,combinedData$To.Abbreviation,sep="-")
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dataAnalyzed, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
combinedData.path <- rbind(jacob, matt, stu, jonny)
#ddply(dataAnalyzed, dataAnalyzed$combinedData.path, summarise, meanFrom = round(mean(whichdataAnalyzed$combinedData.Guess.Angle.From),2), sdFrom = round(sd(dataAnalyzed$combinedData.Guess.Angle.From),2))
ddply(dataAnalyzed, .(combinedData.path), summarize, mean = round(mean(combinedData.Guess.Angle.From), 2), sd = round(sd(combinedData.Guess.Angle.From), 2))
View(combinedData)
remove(combinedData.path)
library(plotly)
p <- plot_ly(
type = 'scatterpolar',
r = c(0,1,2,2),
theta = c(0,45,90,0),
mode = 'markers'
)
install.packages("plotly")
library(plotly)
p <- plot_ly(
type = 'scatterpolar',
r = c(0,1,2,2),
theta = c(0,45,90,0),
mode = 'markers'
)
p
?plot_ly
?add_trace
combinedDataForPath <- subset(combinedData, path = "L-R")
View(combinedDataForPath)
combinedDataForPath <- subset(combinedData, path=="L-R")
View(combinedDataForPath)
View(combinedData)
View(combinedDataForPath)
p <- plot_ly(
type = "scatterpolargl"
mode = "markers"
)
_path <- "L-R"
combinedDataForPath <- subset(combinedData, path==_path)
p <- add_trace(
p,
r = 21,
theta = combinedDataForPath$Guess.Angle.To,
name = paste('Path: ', _path),
marker = list(
size = 15,
line = list(
color = '#FFF'
),
opacity = 0.7
)
)
p <- layout(
p,
title = "Path: " + _path,
paper_bgcolor = "rgb(223, 223, 223)",
showlegend = F,
polar = list(
bgcolor = "rgb(223, 223, 223)",
angularaxis = list(
tickwidth = 2,
linewidth = 3,
layer = 'below traces'
),
radialaxis = list(
side = 'counterclockwise',
showline = T,
linewidth = 2,
tickwidth = 2,
gridcolor = '#FFF',
gridwidth = 2
)
)
)
p <- plot_ly(
type = "scatterpolargl"
mode = "markers"
)
#----------------Polar Graph
p <- plot_ly(type = "scatterpolargl", mode = "markers")
p <- add_trace(p, r = 21, theta = combinedDataForPath$Guess.Angle.To, name = paste('Path: ', currPath), marker = list(size = 15,line = list(color = '#FFF'),opacity = 0.7))
currPath <- "L-R"
combinedDataForPath <- subset(combinedData, path==currPath)
View(combinedDataForPath)
View(combinedDataForPath)
p <- add_trace(p, r = 21, theta = combinedDataForPath$Guess.Angle.To, name = paste('Path: ', currPath), marker = list(size = 15,line = list(color = '#FFF'),opacity = 0.7))
p <- layout(
p,
title = "Path: " + currPath,
paper_bgcolor = "rgb(223, 223, 223)",
showlegend = F,
polar = list(
bgcolor = "rgb(223, 223, 223)",
angularaxis = list(
tickwidth = 2,
linewidth = 3,
layer = 'below traces'
),
radialaxis = list(
side = 'counterclockwise',
showline = T,
linewidth = 2,
tickwidth = 2,
gridcolor = '#FFF',
gridwidth = 2
)
)
)
p <- layout(
p,
title = paste("Path: ",currPath),
paper_bgcolor = "rgb(223, 223, 223)",
showlegend = F,
polar = list(
bgcolor = "rgb(223, 223, 223)",
angularaxis = list(
tickwidth = 2,
linewidth = 3,
layer = 'below traces'
),
radialaxis = list(
side = 'counterclockwise',
showline = T,
linewidth = 2,
tickwidth = 2,
gridcolor = '#FFF',
gridwidth = 2
)
)
)
p
p <- plot_ly(type = "scatterpolargl", mode = "markers")
currPath <- "L-R"
combinedDataForPath <- subset(combinedData, path==currPath)
p <- add_trace(p, r = 21, theta = combinedDataForPath$Guess.Angle.To, name = paste('Path: ', currPath), marker = list(size = 15,line = list(color = '#FFF'),opacity = 0.7))
p <- layout(
p,
title = paste("Path: ",currPath),
paper_bgcolor = "rgb(223, 223, 223)",
showlegend = F,
polar = list(
bgcolor = "rgb(223, 223, 223)",
angularaxis = list(
tickwidth = 2,
linewidth = 3,
layer = 'below traces'
),
radialaxis = list(
side = 'counterclockwise',
showline = T,
linewidth = 2,
tickwidth = 2,
gridcolor = '#FFF',
gridwidth = 2
)
)
)
p
View(combinedDataForPath)
p <- add_trace(p,
r = 21,
theta = combinedDataForPath$Guess.Angle.To,
name = paste('Path: ', currPath),
marker = list(
size = 15,
line = list(color = '#FFF'
),
opacity = 0.7)
)
pie()
p <- add_trace(p,
r = 21,
theta = combinedDataForPath[,22],
name = paste('Path: ', currPath),
marker = list(
size = 15,
line = list(color = '#FFF'
),
opacity = 0.7)
)
p
combinedDataForPath[,22]
library(plotly)
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv")
p <- plot_ly(
type = 'scatterpolargl',
mode = 'markers'
)
j = 1
k = 2
for (i in 1:(length(df)/2)){
p <- add_trace(
p,
r = df[,j],
theta = df[,k],
name = paste('Trial ', i),
marker = list(
size = 15,
line = list(
color = '#FFF'
),
opacity = 0.7
)
)
j <- j + 2
k <- k + 2
}
p <- layout(
p,
title = "Hobbs-Pearson Trials",
showlegend = F,
paper_bgcolor = "rgb(223, 223, 223)",
polar = list(
bgcolor = "rgb(223, 223, 223)",
angularaxis = list(
tickwidth = 2,
linewidth = 3,
layer = 'below traces'
),
radialaxis = list(
side = 'counterclockwise',
showline = T,
linewidth = 2,
tickwidth = 2,
gridcolor = '#FFF',
gridwidth = 2
)
)
)
p
chart_link <- api_create(p, filename = "polar-charts-scatterpolargl")
chart_link
?api_create
library(plotly)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/hobbs-pearson-trials.csv")
p <- plot_ly(
type = 'scatterpolargl',
mode = 'markers'
)
j = 1
k = 2
for (i in 1:(length(df)/2)){
p <- add_trace(
p,
r = df[,j],
theta = df[,k],
name = paste('Trial ', i),
marker = list(
size = 15,
line = list(
color = '#FFF'
),
opacity = 0.7
)
)
j <- j + 2
k <- k + 2
}
p <- layout(
p,
title = "Hobbs-Pearson Trials",
showlegend = F,
paper_bgcolor = "rgb(223, 223, 223)",
polar = list(
bgcolor = "rgb(223, 223, 223)",
angularaxis = list(
tickwidth = 2,
linewidth = 3,
layer = 'below traces'
),
radialaxis = list(
side = 'counterclockwise',
showline = T,
linewidth = 2,
tickwidth = 2,
gridcolor = '#FFF',
gridwidth = 2
)
)
)
chart_link <- api_create(p, filename = "polar-charts-scatterpolargl")
chart_link
p
View(df)
View(df)
write.csv(combinedData)
write.csv(combinedData, file = "combined.csv")
length(dataCombined)
length(combinedData)
length(rows(combinedData)
)
length(row(combinedData))
str(dataCombined)
str(combinedData)
jacob <- read.csv("actualTranslationsAndGuesses2.csv", header = TRUE)
matt <- read.csv("actualTranslationsAndGuesses4.csv", header = TRUE)
stu <- read.csv("actualTranslationsAndGuesses6.csv", header = TRUE)
jonny <- read.csv("actualTranslationsAndGuesses8.csv", header = TRUE)
jonathan <- read.csv("actualTranslationsAndGuesses10.csv", header = TRUE)
noel <- read.csv("actualTranslationsAndGuesses12.csv", header = TRUE)
combinedData <- rbind(jacob, matt, stu, jonny, jonathan, noel)
# Add path column
combinedData$path <- paste(combinedData$From.Abbreviation,combinedData$To.Abbreviation,sep="-")
write.csv(combinedData, file = "combined.csv")
combinedData
